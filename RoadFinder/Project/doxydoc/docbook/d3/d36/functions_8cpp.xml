<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_functions_8cpp" xml:lang="pl">
<title>Dokumentacja pliku Project/headers/functions.cpp</title>
<indexterm><primary>Project/headers/functions.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;functions.h&quot;
</programlisting>Wykres zależności załączania dla functions.cpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../de/d57/functions_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Definicje    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_functions_8cpp_1aa288b29498fa054951dbdca37510664b">MINUMUM_TIME_FOR_CHANGE</link>   5</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Funkcje    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; <link linkend="_class_city">City</link> &gt; <link linkend="_functions_8cpp_1abae79917897174a3c69842beba6fb335">FillCityVec</link> (std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp;timetable)</para>

<para>Funkcja, która na podstawie vectora klas <link linkend="_class_file_line">FileLine</link> tworzy vector klas <link linkend="_class_city">City</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_functions_8cpp_1a6523726a3e2822d792e823e8f11e45b3">IfDuplicates</link> (const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;city)</para>

<para>Funkcja sprawdzająca czy w danej drodze nie wystąpiło już dane miasto. </para>
</listitem>
            <listitem><para>void <link linkend="_functions_8cpp_1aac008d0a41a438a256294eec5c711e58">Correction</link> (std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;roads, const std::string &amp;goal)</para>

<para>Funkcja korekcyjna dla funkcji <link linkend="_functions_8h_1adff9f42478e20c2c819d66a7cf15d65e">FindRoute()</link>. Jest potrzebna do optymalizacji wyników uzyskanych dzięki funkcji FindRoute. </para>
</listitem>
            <listitem><para>void <link linkend="_functions_8cpp_1adff9f42478e20c2c819d66a7cf15d65e">FindRoute</link> (std::string goal, const std::string &amp;from, const std::vector&lt; <link linkend="_class_city">City</link> &gt; &amp;cities, std::vector&lt; std::string &gt; &amp;solution, std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;solutions)</para>

<para>Funkcja, która szuka wszystkie możliwe drogi &quot;z miasta A do miasta B&quot;. </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_functions_8cpp_1af03ece043d7189a2c9822bdb042deb5b">FastestRoad</link> (const std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;roads, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp;timetable)</para>

<para>Funkcja, która na podstawie kontenera roads, znajdzie najszybszą z dróg. </para>
</listitem>
            <listitem><para>std::string <link linkend="_functions_8cpp_1a14e1ef21104a6ad48c88f21480f1310d">ConvertMinutesToHour</link> (int &amp;minutes)</para>

<para>Funkcja, która na podstawie liczby minut podanej w postaci int wygeneruje napis zawierający informacje o tym jaka to jest godzina. </para>
</listitem>
            <listitem><para>int <link linkend="_functions_8cpp_1ad7aebb26f6e8258f90fcfc49b6b1127e">LookForNextDepart</link> (const int &amp;lastHour, const std::string &amp;departCity, const std::string &amp;arriveCity, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp;timetable)</para>

<para>Funkcja szukająca następnej godziny odjazdu &quot;z miasta A do miasta B&quot; względem podanej godziny. </para>
</listitem>
            <listitem><para>int <link linkend="_functions_8cpp_1a520caa7ab9758f319fc4fd17b3d4792f">GetTotalTime</link> (const std::vector&lt; std::string &gt; &amp;road, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp;timetable)</para>

<para>Funkcja, która na podstawie podanej drogi zlicza łączny czas jazdy (razem z czasem oczekiwania na odjazd) </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Dokumentacja definicji</title>
<anchor xml:id="_functions_8cpp_1aa288b29498fa054951dbdca37510664b"/><section>
    <title>MINUMUM_TIME_FOR_CHANGE</title>
<indexterm><primary>MINUMUM_TIME_FOR_CHANGE</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>MINUMUM_TIME_FOR_CHANGE</secondary></indexterm>
<para><computeroutput>#define MINUMUM_TIME_FOR_CHANGE   5</computeroutput></para><para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00003">3</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
</section>
</section>
<section>
<title>Dokumentacja funkcji</title>
<anchor xml:id="_functions_8cpp_1a14e1ef21104a6ad48c88f21480f1310d"/><section>
    <title>ConvertMinutesToHour()</title>
<indexterm><primary>ConvertMinutesToHour</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>ConvertMinutesToHour</secondary></indexterm>
<para><computeroutput>std::string ConvertMinutesToHour (int &amp; minutes)</computeroutput></para><para>

<para>Funkcja, która na podstawie liczby minut podanej w postaci int wygeneruje napis zawierający informacje o tym jaka to jest godzina. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>minutes</entry><entry>
<para>liczba minut </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00173">173</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_a14e1ef21104a6ad48c88f21480f1310d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1aac008d0a41a438a256294eec5c711e58"/><section>
    <title>Correction()</title>
<indexterm><primary>Correction</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>Correction</secondary></indexterm>
<para><computeroutput>void Correction (std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp; roads, const std::string &amp; goal)</computeroutput></para><para>

<para>Funkcja korekcyjna dla funkcji <link linkend="_functions_8h_1adff9f42478e20c2c819d66a7cf15d65e">FindRoute()</link>. Jest potrzebna do optymalizacji wyników uzyskanych dzięki funkcji FindRoute. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>roads</entry><entry>
<para>Vector przechowujący wszystki drogi(które są vectorami stringów) </para>
</entry>
                            </row>
                            <row>
<entry>goal</entry><entry>
<para>Parametr zawierający nazwę miasta docelowego Vector przechowujący wszystkie drogi aktualnie zawiera parę niechcianych wyników. Wszystkie drogi, które nie kończą się miastem docelowym zostaną usunięte z vectora </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_functions_8h_1autotoc_md2">
<title>Element usuwający</title>

<para><literallayout><computeroutput><emphasis role="comment">//aktualnie&#32;wszystkie&#32;drogi&#32;są&#32;w&#32;kolejności&#32;od&#32;miasta&#32;docelowego&#32;do&#32;miasta,&#32;z&#32;którego&#32;odjeżdzamy</emphasis>
<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;roads.size();i++)
{
&#32;&#32;&#32;&#32;std::reverse(roads[i].begin(),&#32;roads[i].end());&#32;&#32;<emphasis role="comment">//odwracamy&#32;miasta&#32;i&#32;teraz&#32;są&#32;w&#32;kolejności&#32;od&#32;miasta,&#32;z&#32;którego&#32;odjeżdzamy&#32;do&#32;miasta&#32;docelowego</emphasis>
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(roads[i].back()&#32;!=&#32;goal)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;roads[i].clear();&#32;&#32;&#32;<emphasis role="comment">//jeśli&#32;droga&#32;nie&#32;kończy&#32;się&#32;na&#32;mieście&#32;docelowonym&#32;usuwamy&#32;całą&#32;zawartość&#32;vectora</emphasis>
}
<emphasis role="comment">//Pod&#32;koniec&#32;funkcji&#32;elementy&#32;puste&#32;zostają&#32;usunięte&#32;z&#32;vectora&#32;dróg</emphasis>
</computeroutput></literallayout> </para>
</section>
<section xml:id="_functions_8h_1autotoc_md3">
<title>Element usuwający duplikaty z vectora dróg</title>

<para><literallayout><computeroutput><emphasis role="keyword">auto</emphasis>&#32;end&#32;=&#32;roads.end();
<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;roads.begin();&#32;it&#32;!=&#32;end;&#32;it++)
&#32;&#32;&#32;&#32;end&#32;=&#32;std::remove(it&#32;+&#32;1,&#32;end,&#32;*it);
roads.erase(end,&#32;roads.end());
</computeroutput></literallayout> <formalpara><title>Zobacz również</title>

<para><link linkend="_functions_8h_1adff9f42478e20c2c819d66a7cf15d65e">FindRoute()</link> </para>
</formalpara>
</para>
</section>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00065">65</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_aac008d0a41a438a256294eec5c711e58_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1af03ece043d7189a2c9822bdb042deb5b"/><section>
    <title>FastestRoad()</title>
<indexterm><primary>FastestRoad</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>FastestRoad</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; FastestRoad (const std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp; roads, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp; timetable)</computeroutput></para><para>

<para>Funkcja, która na podstawie kontenera roads, znajdzie najszybszą z dróg. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>roads</entry><entry>
<para>kontener zawierający wszystkie połączenia &quot;z miasta A do miasta B&quot; </para>
</entry>
                            </row>
                            <row>
<entry>timetable</entry><entry>
<para>kontener zawierający informację o wszystkiech połączeniach (takie jak czas jazdy, godziny odjazdu etc.) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_functions_8h_1autotoc_md4">
<title>Algorytm sprawdzający, która z dróg jest najszybsza</title>

<para><literallayout><computeroutput><emphasis role="keywordtype">int</emphasis>&#32;hourOfDepartFromLastCity;&#32;<emphasis role="comment">//&#32;zmienna&#32;potrzebna&#32;do&#32;przechowania&#32;informacji&#32;o&#32;godzinie,&#32;o&#32;której&#32;podróżnik&#32;będzie&#32;w&#32;mieście,&#32;do&#32;którego&#32;przyjedzie</emphasis>
<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;roads.begin();&#32;it&#32;!=&#32;roads.end();&#32;it++)
&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;time&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;zerowanie&#32;zmiennej,&#32;która&#32;służy&#32;do&#32;liczenia&#32;łącznego&#32;czasu&#32;podróży</emphasis>
&#32;&#32;&#32;&#32;temp&#32;=&#32;*it;&#32;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;temp.size()&#32;-&#32;1;&#32;i++)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;jt&#32;=&#32;timetable.begin();&#32;jt&#32;!=&#32;timetable.end();&#32;jt++)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((jt-&gt;GetCityName(<emphasis role="stringliteral">&quot;departure&quot;</emphasis>)&#32;==&#32;temp[i])&#32;&amp;&amp;&#32;(jt-&gt;GetCityName(<emphasis role="stringliteral">&quot;arrival&quot;</emphasis>)&#32;==&#32;temp[i&#32;+&#32;1]))
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;+=&#32;jt-&gt;GetDuration();&#32;<emphasis role="comment">//&#32;dodanie&#32;do&#32;sumy&#32;czasu&#32;podróży&#32;szacownego&#32;czasu&#32;podróży&#32;&quot;z&#32;miasta&#32;A&#32;do&#32;miasta&#32;B&quot;&#32;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FirstCity)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hourOfDepartFromLastCity&#32;=&#32;jt-&gt;GetHour(0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;jeżeli&#32;to&#32;pierwsze&#32;miasto&#32;z&#32;drogi&#32;zaczynamy&#32;od&#32;pierwszej&#32;godziny,&#32;o&#32;której&#32;możemy&#32;odjechać</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hourOfDepartFromLastCity&#32;+=&#32;jt-&gt;GetDuration();&#32;<emphasis role="comment">//&#32;dodajemy&#32;to&#32;znalezionej&#32;godziny&#32;czas&#32;podróży</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstCity&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;jt-&gt;GetNumberOfHoursOfDepartures();&#32;i++)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jt-&gt;GetHour(i)&#32;&gt;&#32;(hourOfDepartFromLastCity+<link linkend="_functions_8cpp_1aa288b29498fa054951dbdca37510664b">MINUMUM_TIME_FOR_CHANGE</link>))&#32;<emphasis role="comment">//&#32;jeżeli&#32;to&#32;nie&#32;pierwsze&#32;miasto&#32;z&#32;drogi&#32;szukamy&#32;następnej</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;najwcześniejszej&#32;godziny&#32;(uwzględniając&#32;czas&#32;na&#32;przesiadkę)</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;+=&#32;jt-&gt;GetHour(i)&#32;-&#32;hourOfDepartFromLastCity;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hourOfDepartFromLastCity&#32;=&#32;jt-&gt;GetHour(i);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hourOfDepartFromLastCity&#32;+=&#32;jt-&gt;GetDuration();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;foundNextHour;&#32;<emphasis role="comment">//&#32;jeżeli&#32;następna&#32;godzina&#32;odjazdu&#32;została&#32;odnaleziona&#32;szukamy&#32;od&#32;razu&#32;godziny&#32;dla&#32;następnej&#32;pary&#32;miast</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundNextHour:;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(time&#32;&lt;&#32;tempTime)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sol&#32;=&#32;temp;
&#32;&#32;&#32;&#32;tempTime&#32;=&#32;time;&#32;<emphasis role="comment">//&#32;dodatkowa&#32;zmienna&#32;potrzebna&#32;do&#32;porównania&#32;czasów</emphasis>
&#32;&#32;&#32;&#32;FirstCity&#32;=&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;&#32;}
</computeroutput></literallayout> </para>
</section>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00123">123</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_af03ece043d7189a2c9822bdb042deb5b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1abae79917897174a3c69842beba6fb335"/><section>
    <title>FillCityVec()</title>
<indexterm><primary>FillCityVec</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>FillCityVec</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_city">City</link> &gt; FillCityVec (std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp; timetable)</computeroutput></para><para>

<para>Funkcja, która na podstawie vectora klas <link linkend="_class_file_line">FileLine</link> tworzy vector klas <link linkend="_class_city">City</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>timetable</entry><entry>
<para>Gotowy kontener zawierający informację o każdej linii pliku rozkładu jazdy przechowywanej w postaci klasy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00005">5</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_abae79917897174a3c69842beba6fb335_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1adff9f42478e20c2c819d66a7cf15d65e"/><section>
    <title>FindRoute()</title>
<indexterm><primary>FindRoute</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>FindRoute</secondary></indexterm>
<para><computeroutput>void FindRoute (std::string goal, const std::string &amp; from, const std::vector&lt; <link linkend="_class_city">City</link> &gt; &amp; cities, std::vector&lt; std::string &gt; &amp; solution, std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp; solutions)</computeroutput></para><para>

<para>Funkcja, która szuka wszystkie możliwe drogi &quot;z miasta A do miasta B&quot;. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>goal</entry><entry>
<para>zmienna przechowująca nazwę miasta docelowego </para>
</entry>
                            </row>
                            <row>
<entry>from</entry><entry>
<para>zmienna przechowująca nazwę miasta odjazdu </para>
</entry>
                            </row>
                            <row>
<entry>cities</entry><entry>
<para>kontener klas zawierający wszystkie połączenia między miastami </para>
</entry>
                            </row>
                            <row>
<entry>solution</entry><entry>
<para>zmienna tymczasowa, która jest potrzebna do poprawnego działania algorytmu, zawiera jedną drogę (wariacja połączeń miast) </para>
</entry>
                            </row>
                            <row>
<entry>solutions</entry><entry>
<para>kontener, który zostanie zwrócony. Zawiera wszystkie połączenia &quot;z miasta A do miasta B&quot;, które będą korygowane w funkcji <link linkend="_functions_8h_1aac008d0a41a438a256294eec5c711e58">Correction()</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Funkcja jest rekurencyjna. Algorytm szuka wszystkich miast, które mogą dojechać do danego miasta, do którego chcemy dojechać. Następnie szuka wszystkich możliwych miast, z których możemy dojechać do miasta, które jest w stanie dojechać do pierwotnego miasta docelowego etc. </para>
<section xml:id="_functions_8h_1autotoc_md0">
<title>Element szukający pasujące miasta</title>

<para><literallayout><computeroutput><emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;cities.begin();&#32;it&#32;!=&#32;cities.end();&#32;it++)
{
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;condition&#32;=&#32;<link linkend="_functions_8cpp_1a6523726a3e2822d792e823e8f11e45b3">IfDuplicates</link>(solution,&#32;it-&gt;m_name);&#32;<emphasis role="comment">//Funkcja&#32;IfDuplicates()&#32;zwraca&#32;true&#32;jeśli&#32;w&#32;vectorze,&#32;w&#32;którym&#32;zapisujemy&#32;naszą&#32;aktualną&#32;drogę</emphasis>
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!condition)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//znajduje&#32;się&#32;już&#32;miasto&#32;do&#32;którego&#32;chcemy&#32;dojechać&#32;</emphasis>
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;jt&#32;=&#32;it-&gt;m_canTravelTo.begin();&#32;jt&#32;!=&#32;it-&gt;m_canTravelTo.end();&#32;jt++)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*jt&#32;==&#32;goal)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Poniższy&#32;kod&#32;sprawdza,&#32;czy&#32;miasto,&#32;do&#32;którego&#32;chcemy&#32;dojechać&#32;nie&#32;znajduje&#32;się&#32;już&#32;w&#32;rozwiązaniu</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;::iterator&#32;ix;&#32;<emphasis role="comment">//odtąd</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;condition&#32;=&#32;<link linkend="_functions_8cpp_1a6523726a3e2822d792e823e8f11e45b3">IfDuplicates</link>(solution,&#32;*jt);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ix&#32;=&#32;std::find(solution.begin(),&#32;solution.end(),&#32;goal);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.erase(ix,&#32;solution.end());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//dotąd</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.push_back(goal);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8cpp_1adff9f42478e20c2c819d66a7cf15d65e">FindRoute</link>(it-&gt;m_name,&#32;from,&#32;cities,&#32;solution,&#32;solutions);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout> </para>
</section>
<section xml:id="_functions_8h_1autotoc_md1">
<title>Warunek końca rekurencji</title>

<para><literallayout><computeroutput><emphasis role="keywordflow">if</emphasis>&#32;(goal&#32;==&#32;from)
{
&#32;solution.push_back(from);
&#32;solutions.push_back(solution);
&#32;solution.clear();
&#32;<emphasis role="keywordflow">return</emphasis>;
}
</computeroutput></literallayout> Funkcja zawiera w efekcie końcowym parę wyników, które nie są potrzebne dla działania programu i są korygowane w funkcji <link linkend="_functions_8h_1aac008d0a41a438a256294eec5c711e58">Correction()</link> <formalpara><title>Zobacz również</title>

<para><link linkend="_functions_8h_1aac008d0a41a438a256294eec5c711e58">Correction()</link> </para>
</formalpara>
</para>
</section>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00089">89</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywołań dla tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_adff9f42478e20c2c819d66a7cf15d65e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_adff9f42478e20c2c819d66a7cf15d65e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1a520caa7ab9758f319fc4fd17b3d4792f"/><section>
    <title>GetTotalTime()</title>
<indexterm><primary>GetTotalTime</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>GetTotalTime</secondary></indexterm>
<para><computeroutput>int GetTotalTime (const std::vector&lt; std::string &gt; &amp; road, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp; timetable)</computeroutput></para><para>

<para>Funkcja, która na podstawie podanej drogi zlicza łączny czas jazdy (razem z czasem oczekiwania na odjazd) </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>road</entry><entry>
<para>dane połączenie &quot;z miasta A do miasta B&quot; </para>
</entry>
                            </row>
                            <row>
<entry>timetable</entry><entry>
<para>zawierający informację o wszystkich połączeniach (takie jak czas jazdy, godziny odjazdu etc.) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00204">204</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywołań dla tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_a520caa7ab9758f319fc4fd17b3d4792f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_a520caa7ab9758f319fc4fd17b3d4792f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1a6523726a3e2822d792e823e8f11e45b3"/><section>
    <title>IfDuplicates()</title>
<indexterm><primary>IfDuplicates</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>IfDuplicates</secondary></indexterm>
<para><computeroutput>bool IfDuplicates (const std::vector&lt; std::string &gt; &amp; vec, const std::string &amp; city)</computeroutput></para><para>

<para>Funkcja sprawdzająca czy w danej drodze nie wystąpiło już dane miasto. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>vec</entry><entry>
<para>dana droga </para>
</entry>
                            </row>
                            <row>
<entry>city</entry><entry>
<para>miasto, które sprawdzamy, czy już nie wystąpiło </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Zwraca</title>

<para>wartość true jeśli miasto występuje, false jeśli przeciwnie </para>
</formalpara>
</para>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00054">54</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_a6523726a3e2822d792e823e8f11e45b3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_functions_8cpp_1ad7aebb26f6e8258f90fcfc49b6b1127e"/><section>
    <title>LookForNextDepart()</title>
<indexterm><primary>LookForNextDepart</primary><secondary>functions.cpp</secondary></indexterm>
<indexterm><primary>functions.cpp</primary><secondary>LookForNextDepart</secondary></indexterm>
<para><computeroutput>int LookForNextDepart (const int &amp; lastHour, const std::string &amp; departCity, const std::string &amp; arriveCity, const std::vector&lt; <link linkend="_class_file_line">FileLine</link> &gt; &amp; timetable)</computeroutput></para><para>

<para>Funkcja szukająca następnej godziny odjazdu &quot;z miasta A do miasta B&quot; względem podanej godziny. </para>
</para>

<para>
                <formalpara>
                    <title>
Parametry</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lastHour</entry><entry>
<para>informacja o godzinie, od której chcemy znaleść kolejną godzinę odjazdu </para>
</entry>
                            </row>
                            <row>
<entry>departCity</entry><entry>
<para>miasto, z którego odjeżdzamy </para>
</entry>
                            </row>
                            <row>
<entry>arriveCity</entry><entry>
<para>miasto docelowe </para>
</entry>
                            </row>
                            <row>
<entry>timetable</entry><entry>
<para>zawierający informację o wszystkich połączeniach (takie jak czas jazdy, godziny odjazdu etc.) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_functions_8h_1autotoc_md5">
<title>Algorytm szukający następnej godziny</title>

<para><literallayout><computeroutput><emphasis role="keywordtype">bool</emphasis>&#32;cond=<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;timetable.begin();&#32;it&#32;!=&#32;timetable.end();&#32;it++)
&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((it-&gt;GetCityName(<emphasis role="stringliteral">&quot;departure&quot;</emphasis>)&#32;==&#32;departCity)&#32;&amp;&amp;&#32;(it-&gt;GetCityName(<emphasis role="stringliteral">&quot;arrival&quot;</emphasis>)&#32;==&#32;arriveCity))
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;it-&gt;GetNumberOfHoursOfDepartures();&#32;i++)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cond&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;jeżeli&#32;funkcja&#32;nie&#32;skończy&#32;się&#32;po&#32;wykonaniu&#32;tej&#32;pętli&#32;to&#32;znaczy,&#32;że&#32;w&#32;danym&#32;dniu&#32;już&#32;nie&#32;ma&#32;odjazdów</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastHour&#32;&lt;&#32;(it-&gt;GetHour(i)&#32;-&#32;<link linkend="_functions_8cpp_1aa288b29498fa054951dbdca37510664b">MINUMUM_TIME_FOR_CHANGE</link>))
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;GetHour(i);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cond&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;GetHour(0);&#32;<emphasis role="comment">//&#32;funkcja&#32;zwraca&#32;pierwszą&#32;godzinę,&#32;z&#32;której&#32;można&#32;odjechać&#32;(czyli&#32;trzeba&#32;czekać&#32;do&#32;następnego&#32;dnia)</emphasis>
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;}
</computeroutput></literallayout> </para>
</section>
<para>
Definicja w linii <link linkend="_functions_8cpp_source_1l00186">186</link> pliku <link linkend="_functions_8cpp_source">functions.cpp</link>.</para>
Oto graf wywoływań tej funkcji:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d3/d36/functions_8cpp_ad7aebb26f6e8258f90fcfc49b6b1127e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
